name: Update Kodelet Formula

on:
  repository_dispatch:
    types: [new-release]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update (e.g., 0.1.0). If empty, uses latest release'
        required: false

permissions:
  contents: write

jobs:
  update-formula:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh

      - name: Get latest release info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using specified version: $VERSION"
          else
            # Get latest release version from the kodelet repository
            VERSION=$(gh release list --repo jingkaihe/kodelet --limit 1 --json tagName --jq '.[0].tagName' | sed 's/^v//')
            echo "Using latest version: $VERSION"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Latest release version: $VERSION"

      - name: Download release assets and calculate checksums
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create temporary directory for downloads
          mkdir -p temp_downloads
          cd temp_downloads

          # Download binaries for all platforms
          echo "Downloading kodelet binaries for version v$VERSION..."
          
          for asset in kodelet-darwin-amd64 kodelet-darwin-arm64 kodelet-linux-amd64 kodelet-linux-arm64; do
            echo "Downloading $asset..."
            if gh release download "v$VERSION" --repo jingkaihe/kodelet --pattern "$asset"; then
              echo "Downloaded $asset successfully"
              # Calculate SHA256
              sha256=$(sha256sum "$asset" | cut -d' ' -f1)
              env_var_name=$(echo "$asset" | tr '[:lower:]-' '[:upper:]_')
              echo "${env_var_name}_SHA256=$sha256" >> $GITHUB_ENV
              echo "SHA256 for $asset: $sha256"
            else
              echo "Failed to download $asset"
              exit 1
            fi
          done

      - name: Generate formula from template
        run: |
          # Read the template
          template=$(cat kodelet-template.rb)
          
          # Replace placeholders with actual values
          formula=$(echo "$template" | sed \
            -e "s/{{VERSION}}/$VERSION/g" \
            -e "s/{{SHA256_DARWIN_ARM64}}/$KODELET_DARWIN_ARM64_SHA256/g" \
            -e "s/{{SHA256_DARWIN_AMD64}}/$KODELET_DARWIN_AMD64_SHA256/g" \
            -e "s/{{SHA256_LINUX_ARM64}}/$KODELET_LINUX_ARM64_SHA256/g" \
            -e "s/{{SHA256_LINUX_AMD64}}/$KODELET_LINUX_AMD64_SHA256/g")
          
          # Write the formula
          echo "$formula" > Formula/kodelet.rb
          
          echo "Generated formula for version $VERSION"
          cat Formula/kodelet.rb

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add Formula/kodelet.rb
          
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update kodelet formula to version $VERSION"
            git push
            echo "Formula updated to version $VERSION"
          fi

      - name: Clean up
        run: rm -rf temp_downloads